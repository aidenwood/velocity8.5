---
import '@fontsource/inter/latin-400.css';
import '@fontsource/inter/latin-500.css';
import { ViewTransitions } from 'astro:transitions';
import Footer from '../components/layout/Footer.astro';
import Header from '../components/layout/Header.astro';
import type { arrayOutputType } from 'astro/zod';


interface Props {
  description: string;
  title: string;
  canonicalURL?: URL | string;
}

const { description, title } = Astro.props;

const canonicalURL = Astro.props.canonicalURL || new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />

    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="sitemap" href="/sitemap-0.xml" />

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta property="og:image" content="/opengraph.png" />
    <meta name="twitter:image" content="/opengraph.png">

    <meta name="generator" content={Astro.generator} />
    
    <meta name="title" content={title}>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL}>

    <title>{title}</title>


    <ViewTransitions />
  </head>
  <body 
    class="bg-primary-50/30 text-primary-950 dark:bg-black dark:text-primary-200 antialiased transition" 
  >
    <Header />
    <main >
      <slot />
    </main>
    <Footer />
    <style is:global>
      [x-cloak] {
        display: none !important;
      }
    </style>
    <script>
      import Alpine from 'alpinejs';
      import collapse from '@alpinejs/collapse';

      Alpine.plugin(collapse);

      Alpine.store('theme', {
        init() {
          this.isDark = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
              return localStorage.getItem('theme') === 'dark';
            }
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return true;
            }
            return false;
          })();
        },

        isDark: false,

        toggle() {
          this.isDark = !this.isDark;
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        },
      });

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>


<!-- CSS -->
<link rel="stylesheet" href="https://unpkg.com/flickity@2/dist/flickity.min.css">
<!-- JavaScript -->
<script is:inline src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"></script>


<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-MN4T5PXYLD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-MN4T5PXYLD');
</script>